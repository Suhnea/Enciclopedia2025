import tkinter as tk
from tkinter import messagebox
import json
import os

# –¶–≤–µ—Ç–∞ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
LIGHT_TEXT_COLOR = "#584738"
LIGHT_BACKGROUND_COLOR = "#B59E7D"
LIGHT_BUTTON_COLOR = "#8B7355"
LIGHT_HOVER_COLOR = "#6B5A4A"

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã
DARK_TEXT_COLOR = "#B59E7D"
DARK_BACKGROUND_COLOR = "#584738"
DARK_BUTTON_COLOR = "#6B5A4A"
DARK_HOVER_COLOR = "#8B7355"

# –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ç–ª–∞—è)
current_theme = "light"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞
def load_data(letter):
    file_path = f"data_{letter}.json"
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as file:
            return json.load(file)
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –¥–ª—è –±—É–∫–≤—ã {letter} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
def show_words(letter):
    data = load_data(letter)
    if not data:
        return

    # –û—á–∏—â–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    for widget in content_frame.winfo_children():
        widget.destroy()

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ –±—É–∫–≤–∞–º
    back_button = tk.Button(
        content_frame,
        text="‚Üê –ù–∞–∑–∞–¥ –∫ –±—É–∫–≤–∞–º",
        command=show_alphabet,
        font=("Helvetica", 12),
        fg="white",
        bg=LIGHT_BUTTON_COLOR if current_theme == "light" else DARK_BUTTON_COLOR,
        relief="flat",
        bd=0,
        padx=20,
        pady=10,
        activebackground=LIGHT_HOVER_COLOR if current_theme == "light" else DARK_HOVER_COLOR,
        activeforeground="white"
    )
    back_button.pack(pady=10)

    # Canvas –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    canvas = tk.Canvas(content_frame, bg=LIGHT_BACKGROUND_COLOR if current_theme == "light" else DARK_BACKGROUND_COLOR, highlightthickness=0)
    canvas.pack(side="left", fill="both", expand=True)

    # –î–æ–±–∞–≤–ª—è–µ–º Scrollbar
    scrollbar = tk.Scrollbar(content_frame, orient="vertical", command=canvas.yview)
    scrollbar.pack(side="right", fill="y")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Canvas –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Scrollbar
    canvas.configure(yscrollcommand=scrollbar.set)
    canvas.bind(
        "<Configure>",
        lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
    )

    # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏ Canvas
    words_frame = tk.Frame(canvas, bg=LIGHT_BACKGROUND_COLOR if current_theme == "light" else DARK_BACKGROUND_COLOR)
    canvas.create_window((0, 0), window=words_frame, anchor="nw")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ª–æ–≤–∞
    for word in data:
        button = tk.Button(
            words_frame,
            text=word,
            command=lambda w=word, d=data: show_meaning(w, d[w]),
            font=("Helvetica", 12),
            fg=LIGHT_TEXT_COLOR if current_theme == "light" else DARK_TEXT_COLOR,
            bg=LIGHT_BUTTON_COLOR if current_theme == "light" else DARK_BUTTON_COLOR,
            relief="flat",
            bd=0,
            padx=20,
            pady=10,
            width=30,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–Ω–æ–ø–æ–∫
            activebackground=LIGHT_HOVER_COLOR if current_theme == "light" else DARK_HOVER_COLOR,
            activeforeground="white"
        )
        button.pack(fill="x", pady=5, padx=20)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –ø–æ –±–æ–∫–∞–º

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–ª—Ñ–∞–≤–∏—Ç–∞
def show_alphabet():
    # –û—á–∏—â–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    for widget in content_frame.winfo_children():
        widget.destroy()

    # –§—Ä–µ–π–º –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –±—É–∫–≤
    center_frame = tk.Frame(content_frame, bg=LIGHT_BACKGROUND_COLOR if current_theme == "light" else DARK_BACKGROUND_COLOR)
    center_frame.pack(expand=True)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±—É–∫–≤—ã
    for i, letter in enumerate("–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"):
        button = tk.Button(
            center_frame,
            text=letter,
            command=lambda l=letter: show_words(l),
            font=("Helvetica", 14),
            fg="white",
            bg=LIGHT_BUTTON_COLOR if current_theme == "light" else DARK_BUTTON_COLOR,
            relief="flat",
            bd=0,
            padx=20,
            pady=10,
            activebackground=LIGHT_HOVER_COLOR if current_theme == "light" else DARK_HOVER_COLOR,
            activeforeground="white"
        )
        button.grid(row=i // 6, column=i % 6, padx=10, pady=10)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞
def show_meaning(word, meaning):
    meaning_window = tk.Toplevel(root)
    meaning_window.title(word)
    meaning_window.geometry("600x400")
    meaning_window.configure(bg=LIGHT_BACKGROUND_COLOR if current_theme == "light" else DARK_BACKGROUND_COLOR)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    label = tk.Label(
        meaning_window,
        text=word,
        font=("Helvetica", 18, "bold"),
        fg=LIGHT_TEXT_COLOR if current_theme == "light" else DARK_TEXT_COLOR,
        bg=LIGHT_BACKGROUND_COLOR if current_theme == "light" else DARK_BACKGROUND_COLOR
    )
    label.pack(pady=20)

    # –¢–µ–∫—Å—Ç –∑–Ω–∞—á–µ–Ω–∏—è
    text_frame = tk.Frame(meaning_window, bg=LIGHT_BACKGROUND_COLOR if current_theme == "light" else DARK_BACKGROUND_COLOR)
    text_frame.pack(fill="both", expand=True, padx=20, pady=10)

    text = tk.Text(
        text_frame,
        wrap="word",
        font=("Helvetica", 12),
        fg=LIGHT_TEXT_COLOR if current_theme == "light" else DARK_TEXT_COLOR,
        bg=LIGHT_BACKGROUND_COLOR if current_theme == "light" else DARK_BACKGROUND_COLOR,
        bd=0,
        highlightthickness=0
    )
    text.insert("1.0", meaning)
    text.config(state="disabled")  # –ó–∞–ø—Ä–µ—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    text.pack(fill="both", expand=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Ç–µ–º—ã
def toggle_theme():
    global current_theme
    if current_theme == "light":
        current_theme = "dark"
    else:
        current_theme = "light"
    apply_theme()

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
def apply_theme():
    theme_text_color = LIGHT_TEXT_COLOR if current_theme == "light" else DARK_TEXT_COLOR
    theme_bg_color = LIGHT_BACKGROUND_COLOR if current_theme == "light" else DARK_BACKGROUND_COLOR
    theme_button_color = LIGHT_BUTTON_COLOR if current_theme == "light" else DARK_BUTTON_COLOR
    theme_hover_color = LIGHT_HOVER_COLOR if current_theme == "light" else DARK_HOVER_COLOR

    root.configure(bg=theme_bg_color)
    title_label.config(fg=theme_text_color, bg=theme_bg_color)
    content_frame.config(bg=theme_bg_color)

    for widget in content_frame.winfo_children():
        if isinstance(widget, tk.Button):
            widget.config(
                fg="white" if widget["text"] in "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø‚Üê –ù–∞–∑–∞–¥ –∫ –±—É–∫–≤–∞–º" else theme_text_color,
                bg=theme_button_color,
                activebackground=theme_hover_color,
                activeforeground="white"
            )
        elif isinstance(widget, tk.Canvas):
            widget.config(bg=theme_bg_color)

    theme_button.config(
        text="üåô" if current_theme == "light" else "‚òÄÔ∏è",
        bg=theme_button_color,
        activebackground=theme_hover_color
    )

# –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
root = tk.Tk()
root.title("–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è ¬´–•–æ—á—É –≤—Å–µ –∑–Ω–∞—Ç—å 2025¬ª")
root.geometry("800x600")
root.configure(bg=LIGHT_BACKGROUND_COLOR)

# –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã
theme_button = tk.Button(
    root,
    text="üåô",
    command=toggle_theme,
    font=("Helvetica", 12),
    fg="white",
    bg=LIGHT_BUTTON_COLOR,
    relief="flat",
    bd=0,
    padx=10,
    pady=5,
    activebackground=LIGHT_HOVER_COLOR,
    activeforeground="white"
)
theme_button.place(x=10, y=10)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
title_label = tk.Label(
    root,
    text="–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É:",
    font=("Helvetica", 24, "bold"),
    fg=LIGHT_TEXT_COLOR,
    bg=LIGHT_BACKGROUND_COLOR
)
title_label.pack(pady=30)

# –§—Ä–µ–π–º –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–±—É–∫–≤—ã –∏–ª–∏ —Å–ª–æ–≤–∞)
content_frame = tk.Frame(root, bg=LIGHT_BACKGROUND_COLOR)
content_frame.pack(fill="both", expand=True, padx=20, pady=20)

# –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–ª—Ñ–∞–≤–∏—Ç
show_alphabet()

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
root.mainloop()